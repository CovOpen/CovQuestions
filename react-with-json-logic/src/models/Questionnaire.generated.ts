/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Represents a single question of the questionnaire.
 */
export type AnyQuestion = QuestionWithoutOptions | QuestionWithOptions | NumericQuestion;
/**
 * Represents a question. The answer is a choice of yes/no, text or date.
 */
export type QuestionWithoutOptions = CommonQuestionFields & {
  /**
   * Type of the question.
   */
  type: "boolean" | "date" | "text";
};
/**
 * Logic expression used to compute this variable. Defaults to true.
 */
export type LogicExpression = LogicOperator | LogicVariable | LogicConstant;
export type LogicOperator =
  | LogicIf
  | LogicReduce
  | LogicSome
  | LogicEquals
  | LogicGreaterEqual
  | LogicNot
  | LogicLessEqual
  | LogicPlus
  | LogicMinus
  | LogicAnd
  | LogicOr
  | LogicIn
  | LogicGreater
  | LogicLess;
export type LogicConstant = number | string | boolean;
/**
 * Type of the question.
 */
export type QuestionType = "boolean" | "date" | "text" | "number" | "select" | "multiselect";
/**
 * Represents a question with predefined answers to select.
 */
export type QuestionWithOptions = CommonQuestionFields & {
  /**
   * Answer options for Select/Multiselect questions.
   */
  options?: Option[];
  /**
   * Type of the question.
   */
  type: "select" | "multiselect";
};
/**
 * Represents a question with numeric answer.
 */
export type NumericQuestion = CommonQuestionFields & {
  numericOptions?: NumericOption;
  /**
   * Type of the question.
   */
  type: "number";
};

/**
 * The questionnaire.
 */
export interface Questionnaire {
  /**
   * Unique, assigned identifier. Machine friendly.
   */
  id: string;
  /**
   * Language of this questionnaire, as ISO 639-1 code.
   * Note that further languages can be defined in external lookup files.
   */
  language?: string;
  /**
   * Unique, assigned identifier. Machine friendly.
   */
  title?: string;
  meta: QuestionnaireMeta;
  /**
   * All questions, shown one after another, in order.
   */
  questions: AnyQuestion[];
  /**
   * All result categories. When all questions are answered,
   * the result for each result category is computed.
   */
  resultCategories: ResultCategory[];
  /**
   * File format/api version in semver.
   */
  schemaVersion: string;
  /**
   * All variables, refreshed after each update to any answer.
   */
  variables: Variable[];
  /**
   * Version of this question in semver.
   */
  version: number;
}
/**
 * Meta-Information for a questionnaire.
 */
export interface QuestionnaireMeta {
  author: string;
  /**
   * Creation date as ISO 8601 string
   */
  creationDate: string;
  description?: string;
  /**
   * Expiration date as ISO 8601 string
   */
  experiationDate?: string;
  /**
   * Languages this questionnaire is also available in, as ISO 639-1 code.
   */
  availableLanguages?: string[];
  publisher?: string;
  /**
   * Region restriction (e.g. regions in which this questionnaire is valid) as list of ISO 3166 ids.
   */
  regions?: string[];
}
/**
 * Represents the common fields of every question.
 */
export interface CommonQuestionFields {
  /**
   * Optional human-readable details or clarification about this question.
   */
  details?: string;
  enableWhen?: LogicExpression;
  /**
   * Unique id for referring this question in logic expressions.
   */
  id: string;
  /**
   * Boolean indicating whether the question is optional or not.
   */
  optional?: boolean;
  /**
   * Human-readable question text, can be localized.
   */
  text: string;
  type: QuestionType;
}
export interface LogicIf {
  if: [LogicExpression, LogicExpression, LogicExpression];
}
export interface LogicReduce {
  reduce: [LogicExpression, LogicExpression, LogicExpression];
}
export interface LogicSome {
  some: [LogicExpression, LogicExpression];
}
export interface LogicEquals {
  "==": [LogicExpression, LogicExpression];
}
export interface LogicGreaterEqual {
  ">=": [LogicExpression, LogicExpression];
}
export interface LogicNot {
  "!": LogicExpression | LogicExpression[];
}
export interface LogicLessEqual {
  "<=": [LogicExpression, LogicExpression];
}
export interface LogicPlus {
  "+": [LogicExpression, LogicExpression];
}
export interface LogicMinus {
  "-": [LogicExpression, LogicExpression];
}
export interface LogicAnd {
  and: LogicExpression[];
}
export interface LogicOr {
  or: LogicExpression[];
}
export interface LogicIn {
  in: [LogicExpression | LogicExpression[], LogicExpression | LogicExpression[]];
}
export interface LogicGreater {
  ">": [LogicExpression, LogicExpression];
}
export interface LogicLess {
  "<": [LogicExpression, LogicExpression];
}
export interface LogicVariable {
  var: string;
}
/**
 * Option for multi-select questions.
 */
export interface Option {
  /**
   * Human-Readable formulation of this option as yes/no question.
   * This is for use-cases where multi-selects are not possible in the UI,
   * for example telephone hotlines.
   */
  asQuestion?: string;
  /**
   * Human-Readable answer, can be localized.
   */
  text: string;
  /**
   * Value used for evaluating logic expressions.
   */
  value: string;
}
/**
 * Option for numeric questions.
 * Answer options for Select/Multiselect questions.
 */
export interface NumericOption {
  /**
   * Default value
   */
  defaultValue?: number;
  /**
   * maximal value
   */
  max?: number;
  /**
   * Minimal value
   */
  min?: number;
  /**
   * Step size
   */
  step?: number;
}
/**
 * Represents a result category. A category might yield exactly one or zero results at the end of the questionnaire.
 */
export interface ResultCategory {
  /**
   * A human readable description for the result category. Can be localized.
   */
  description: string;
  /**
   * A unique identifier for this result category.
   */
  id: string;
  /**
   * A list of results for this category.
   */
  results: Result[];
}
/**
 * Represents a single result.
 * The value of the logic expression yielding true or false. The first result in the result category yielding true will be
 * used as result. If no result evaluates to true, no result is shown for this category.
 */
export interface Result {
  /**
   * A unique identifier for this result.
   */
  id: string;
  /**
   * A human readable text for this result. Can be localized.
   */
  text: string;
  value: LogicExpression;
}
/**
 * Represents a variable which is computed from the given answers or other variables.
 */
export interface Variable {
  /**
   * Unique id for referring this variable in logic expressions.
   */
  id: string;
  value: LogicExpression;
}
